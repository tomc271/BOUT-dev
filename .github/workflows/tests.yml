name: Tests
on:
  push:
  pull_request:
  schedule:
    # run sunday moring
    - cron: '30 6 * * 0'

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - name: "Debug, shared"
            os: ubuntu-latest
            cmake_options: "-DCHECK=4 -DCMAKE_BUILD_TYPE=Debug -DBOUT_ENABLE_SIGNAL=ON -DBOUT_ENABLE_TRACK=ON -DBOUT_USE_PETSC=ON -DBOUT_USE_SLEPC=ON -DBOUT_USE_SUNDIALS=ON -DBOUT_USE_HYPRE=ON -DSUNDIALS_ROOT=/home/runner/local -DPETSC_DIR=/home/runner/local/petsc -DSLEPC_DIR=/home/runner/local/slepc"
            build_petsc: -petsc
            build_petsc_branch: v3.23.3
            unit_only: ""
            on_cron: false
            omp_num_threads: 2
    env:
      BOUT_TEST_TIMEOUT: 6m
      OMP_NUM_THREADS: ${{ matrix.config.omp_num_threads }}
      PYTHONPATH: ${{ github.workspace }}/tools/pylib
      OMPI_MCA_rmaps_base_oversubscribe: yes
      PRTE_MCA_rmaps_default_mapping_policy: ":oversubscribe"
      MPIRUN: mpiexec -np

    steps:
      - uses: actions/checkout@v4
      - name: Set up PETSc build
        run: echo "BUILD_PETSC=${{ matrix.config.build_petsc }}" >> $GITHUB_ENV
      - name: Install base dependencies
        run: |
          sudo apt update
          sudo apt install -y libfftw3-dev libnetcdf-dev libnetcdf-c++4-dev netcdf-bin python3 python3-pip python3-pytest python3-numpy python3-scipy lcov openmpi-bin libopenmpi-dev liblapack-dev libparpack2-dev libhypre-dev
      - name: Install system PETSc/SLEPc for non-custom jobs
        if: matrix.config.build_petsc == ''
        run: sudo apt install -y petsc-dev slepc-dev
      - name: Build PETSc/SLEPc
        if: matrix.config.build_petsc != ''
        run: ./.build_petsc_for_ci.sh ${{ matrix.config.build_petsc_branch }}
      - name: Debug PETSc installation
        run: |
          echo "Checking PETSc installation:"
          ls -la /home/runner/local/petsc /home/runner/local/petsc/include /home/runner/local/petsc/lib || echo "PETSc directory missing"
          echo "Checking SLEPc installation:"
          ls -la /home/runner/local/slepc /home/runner/local/slepc/lib || echo "SLEPc directory missing"
          echo "Checking system PETSc:"
          find /usr/lib -name petscmat.h || echo "No system petscmat.h found"
      - name: Clear CMake cache
        run: rm -rf build
      - name: Build BOUT++
        run: UNIT_ONLY=${{ matrix.config.unit_only }} ./.ci_with_cmake.sh ${{ matrix.config.cmake_options }}

      - name: Install pip packages
        run: |
          python -m pip install --upgrade pip setuptools
          python -m pip install -r requirements.txt

      - name: Cache SUNDIALS build
        uses: actions/cache@v4
        with:
          path: /home/runner/local
          key: bout-sundials-${{ matrix.config.os }}${{ matrix.config.build_petsc }}

      - name: Build SUNDIALS
        run: ./.build_sundials_for_ci.sh

      - name: Build PETSc
        run: BUILD_PETSC=${{ matrix.config.build_petsc }} ./.build_petsc_for_ci.sh ${{ matrix.config.build_petsc_branch }}

      - name: Build ADIOS2
        run: BUILD_ADIOS2=${{ matrix.config.build_adios2 }} ./.build_adios2_for_ci.sh 

      - name: Build BOUT++
        run: UNIT_ONLY=${{ matrix.config.unit_only }} ./.ci_with_cmake.sh ${{ matrix.config.cmake_options }}

  Fedora:
    # This is its own job as it doesn't use most of the steps of the
    # standard_tests
    timeout-minutes: 120
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Build Fedora rawhide
        run: ./.ci_fedora.sh setup openmpi rawhide
        shell: bash
        env:
          TRAVIS_BUILD_DIR: ${{ github.workspace }}
  CUDA:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    container: ghcr.io/ggeorgakoudis/boutdev-cuda:latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Build minimal CUDA 12.2 @ GCC9.4.0 @ Ubuntu 20.04
        run: |
          . /spack/share/spack/setup-env.sh
          spack env activate -p /spack-env
          git config --global --add safe.directory $GITHUB_WORKSPACE
          rm -rf build
          cmake -S $GITHUB_WORKSPACE -B build \
            -DCMAKE_C_COMPILER=gcc \
            -DCMAKE_CXX_COMPILER=g++ \
            -DBOUT_ENABLE_RAJA=on \
            -DBOUT_ENABLE_UMPIRE=on \
            -DBOUT_ENABLE_CUDA=on \
            -DCMAKE_CUDA_ARCHITECTURES=80 \
            -DCUDA_ARCH=compute_80,code=sm_80 \
            -DBOUT_ENABLE_WARNINGS=off \
            -DBOUT_USE_SYSTEM_FMT=on
          cd build
          make -j 4
